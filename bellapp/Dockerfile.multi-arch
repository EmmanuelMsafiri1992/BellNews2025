# Multi-architecture optimized Dockerfile for Bell Python App
# Supports both AMD64 and ARM64 architectures
FROM --platform=$BUILDPLATFORM python:3.12-slim-bookworm

# Build arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV IN_DOCKER=1
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

WORKDIR /bellapp

# Install system dependencies with architecture awareness
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    python3-dev \
    build-essential \
    libc6-dev \
    make \
    pkg-config \
    libffi-dev \
    && case "${TARGETARCH}" in \
        amd64) apt-get install -y --no-install-recommends \
            libasound2-dev \
            alsa-utils \
            libasound2 \
            portaudio19-dev \
            libsndfile1 ;; \
        arm64) apt-get install -y --no-install-recommends \
            libasound2-dev:arm64 \
            alsa-utils \
            libasound2:arm64 \
            portaudio19-dev:arm64 \
            libsndfile1:arm64 ;; \
    esac && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*

# Create virtual environment
RUN python3 -m venv $VIRTUAL_ENV

# Upgrade pip and install build tools in virtual environment
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --no-compile -r requirements.txt

# Copy application code
COPY . .

# Create logs directory with proper permissions
RUN mkdir -p logs && chmod 755 logs

# Remove build dependencies to reduce image size (multi-stage approach)
RUN apt-get update && apt-get purge -y \
    gcc \
    g++ \
    python3-dev \
    build-essential \
    libc6-dev \
    make \
    pkg-config \
    libffi-dev \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*

# Health check for container monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# Expose ports
EXPOSE 5000 5001

# Run the application
CMD ["python3", "launch_vcns_timer.py"]